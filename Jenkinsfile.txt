pipeline {
    agent any

    environment {
        SONARQUBE_SERVER = 'SonarQube_Server'
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv(SONARQUBE_SERVER) {
                    withCredentials([string(credentialsId: 'sqa_ff9592e202d0191f219da29b72b5b4d7c5644ed8', variable: 'SONAR_TOKEN')]) {
                        sh """
                            ${tool 'SonarQube Scanner'}/bin/sonar-scanner \
                            -Dsonar.projectKey=test5-escanner \
                            -Dsonar.projectName=test5-Scan \
                            -Dsonar.projectVersion=1.0 \
                            -Dsonar.sources=/var/jenkins_home/workspace/test5 \
                            -Dsonar.language=php \
                            -Dsonar.sourceEncoding=UTF-8 \
                            -Dsonar.login=$SONAR_TOKEN
                        """
                    }
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    def qualityGate = waitForQualityGate()
                    if (qualityGate.status != 'OK') {
                        error "Pipeline failed due to SonarQube quality gate failure: ${qualityGate.status}"
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        failure {
            echo 'Pipeline failed'
        }
        success {
            echo 'Pipeline succeeded'
        }
    }
}
