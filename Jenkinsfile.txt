pipeline {
    agent any
    environment {
        // SonarQube server details - make sure "SonarQube" matches your Jenkins SonarQube configuration
        SONARQUBE_SERVER = 'SonarQube'
    }
    stages {
        stage('Checkout') {
            steps {
                // Checkout your source code
                checkout scm
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv(SONARQUBE_SERVER) {
                    // Run SonarScanner with specific project properties
                    sh """
                        sonar-scanner \
                        -Dsonar.projectKey=test4-escanner \
                        -Dsonar.projectName=test4-Scan \
                        -Dsonar.projectVersion=1.0 \
                        -Dsonar.sources=/var/jenkins_home/workspace/test4 \
                        -Dsonar.language=php \
                        -Dsonar.sourceEncoding=UTF-8 \
                        -Dsonar.login=admin \
                        -Dsonar.password=Stucom.2024!
                    """
                }
            }
        }
        stage('Quality Gate') {
            steps {
                // Wait for SonarQube quality gate result
                script {
                    def qualityGate = waitForQualityGate()
                    if (qualityGate.status != 'OK') {
                        error "Pipeline failed due to SonarQube quality gate failure: ${qualityGate.status}"
                    }
                }
            }
        }
    }
    post {
        always {
            // Archive any relevant artifacts and cleanup
            echo 'Cleaning up workspace'
            cleanWs()
        }
        failure {
            echo 'Pipeline failed'
        }
        success {
            echo 'Pipeline succeeded'
        }
    }
}
